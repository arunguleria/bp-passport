const PushNotifications = require('react-native-push-notification')
import PushNotificationIOS from '@react-native-community/push-notification-ios'

PushNotifications.configure({
  // (optional) Called when Token is generated (iOS and Android)
  onRegister(token) {
    console.log('TOKEN:', token)
    scheduleNotif()
  },

  // (required) Called when a remote or local notification is opened or received
  onNotification(notification) {
    console.log('NOTIFICATION:', notification)

    // process the notification

    // required on iOS only (see fetchCompletionHandler docs: https://github.com/react-native-community/react-native-push-notification-ios)
    notification.finish(PushNotificationIOS.FetchResult.NoData)
  },

  // IOS ONLY (optional): default: all - Permissions to register.
  permissions: {
    alert: true,
    badge: true,
    sound: true,
  },

  // Should the initial notification be popped automatically
  // default: true
  popInitialNotification: true,

  /**
   * (optional) default: true
   * - Specified if permissions (ios) and token (android and ios) will requested or not,
   * - if not, you must call PushNotificationsHandler.requestPermissions() later
   */
  requestPermissions: false,
})

export default PushNotifications

/*
PushNotifications.checkPermissions((permissions) => {
  console.log('permissions: ', permissions)
})
*/

let lastId: number = 2

export const scheduleNotif = () => {
  lastId++
  console.log('scheduleNotif...', lastId)

  PushNotifications.localNotificationSchedule({
    date: new Date(Date.now() + 30 * 1000), // in 30 secs

    /* Android Only Properties */
    id: '' + lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    ticker: 'My Notification Ticker', // (optional)
    autoCancel: true, // (optional) default: true
    largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
    smallIcon: 'ic_launcher', // (optional) default: "ic_notification" with fallback for "ic_launcher"
    bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
    subText: 'This is a subText', // (optional) default: none
    color: 'blue', // (optional) default: system default
    vibrate: true, // (optional) default: true
    vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    // tag: 'some_tag',  (optional) add tag to message
    // group: 'group', (optional) add group to message
    ongoing: false, // (optional) set whether this is an "ongoing" notification

    /* iOS only properties */
    alertAction: 'view', // (optional) default: view
    category: '', // (optional) default: empty string
    userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

    /* iOS and Android properties */
    title: 'Scheduled Notification', // (optional)
    message: 'My Notification Message', // (required)
    playSound: true, // (optional) default: true
    soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  })
}

/*
PushNotifications.requestPermissions()
  .then((permissions) => {
    // {"alert": true, "badge": true, "sound": true}
    console.log('Permissions completed: ', permissions)
  })
  .catch((err) => {
    console.log('Permissions error: ', err)
  }) */

/*
PushNotificationIOS.requestPermissions().then((permissions) => {
  console.log('permissions: ', permissions)
})
*/
